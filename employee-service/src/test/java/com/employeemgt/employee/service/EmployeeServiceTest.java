package com.employeemgt.employee.service;

import com.employeemgt.employee.dto.EmployeeRequest;
import com.employeemgt.employee.dto.EmployeeResponse;
import com.employeemgt.employee.entity.Department;
import com.employeemgt.employee.entity.Employee;
import com.employeemgt.employee.entity.Employee.EmployeeStatus;
import com.employeemgt.employee.exception.DuplicateResourceException;
import com.employeemgt.employee.exception.ResourceNotFoundException;
import com.employeemgt.employee.repository.DepartmentRepository;
import com.employeemgt.employee.repository.EmployeeRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EmployeeServiceTest {

    @Mock
    private EmployeeRepository employeeRepository;

    @Mock
    private DepartmentRepository departmentRepository;

    @Mock
    private EmployeeEventProducer employeeEventProducer;

    @Mock
    private EmployeeCodeGenerator codeGenerator;

    @InjectMocks
    private EmployeeService employeeService;

    private EmployeeRequest employeeRequest;
    private Employee employee;
    private Department department;

    @BeforeEach
    void setUp() {
        // Setup test data
        department = new Department();
        department.setId(1L);
        department.setName("Engineering");
        department.setCode("ENG");

        employeeRequest = new EmployeeRequest();
        employeeRequest.setEmployeeCode("EMP001");
        employeeRequest.setFirstName("John");
        employeeRequest.setLastName("Doe");
        employeeRequest.setEmail("john.doe@company.com");
        employeeRequest.setPhoneNumber("1234567890");
        employeeRequest.setHireDate(LocalDate.now());
        employeeRequest.setJobTitle("Software Engineer");
        employeeRequest.setSalary(new BigDecimal("75000.00"));
        employeeRequest.setStatus(EmployeeStatus.ACTIVE);
        employeeRequest.setDepartmentId(1L);

        employee = new Employee(
                "EMP001",
                "John",
                "Doe",
                "john.doe@company.com",
                LocalDate.now(),
                "Software Engineer",
                new BigDecimal("75000.00"),
                department
        );
        employee.setId(1L);
        employee.setPhoneNumber("1234567890");
        employee.setStatus(EmployeeStatus.ACTIVE);
        employee.setCreatedAt(LocalDateTime.now());
        employee.setUpdatedAt(LocalDateTime.now());
    }

    @Test
    void createEmployee_WithValidData_ShouldReturnEmployeeResponse() {
        // Arrange
        when(departmentRepository.findById(1L)).thenReturn(Optional.of(department));
        when(employeeRepository.existsByEmployeeCode("EMP001")).thenReturn(false);
        when(employeeRepository.existsByEmail("john.doe@company.com")).thenReturn(false);
        when(employeeRepository.save(any(Employee.class))).thenReturn(employee);
        doNothing().when(employeeEventProducer).sendEmployeeCreatedEvent(any(Employee.class));

        // Act
        EmployeeResponse response = employeeService.createEmployee(employeeRequest);

        // Assert
        assertNotNull(response);
        assertEquals("John", response.getFirstName());
        assertEquals("Doe", response.getLastName());
        assertEquals("john.doe@company.com", response.getEmail());
        assertEquals("EMP001", response.getEmployeeCode());
        verify(employeeRepository).save(any(Employee.class));
        verify(employeeEventProducer).sendEmployeeCreatedEvent(any(Employee.class));
    }

    @Test
    void createEmployee_WithAutoGeneratedCode_ShouldGenerateCodeAndCreateEmployee() {
        // Arrange
        employeeRequest.setEmployeeCode(null); // No code provided
        when(codeGenerator.generateEmployeeCode("EMPLOYEE")).thenReturn("AUTO001");
        when(departmentRepository.findById(1L)).thenReturn(Optional.of(department));
        when(employeeRepository.existsByEmail("john.doe@company.com")).thenReturn(false);
        when(employeeRepository.save(any(Employee.class))).thenReturn(employee);
        doNothing().when(employeeEventProducer).sendEmployeeCreatedEvent(any(Employee.class));

        // Act
        EmployeeResponse response = employeeService.createEmployee(employeeRequest);

        // Assert
        assertNotNull(response);
        verify(codeGenerator).generateEmployeeCode("EMPLOYEE");
        verify(employeeRepository).save(any(Employee.class));
    }

    @Test
    void createEmployee_WithDuplicateEmployeeCode_ShouldThrowDuplicateResourceException() {
        // Arrange
        when(employeeRepository.existsByEmployeeCode("EMP001")).thenReturn(true);

        // Act & Assert
        assertThrows(DuplicateResourceException.class, 
            () -> employeeService.createEmployee(employeeRequest));
        
        verify(employeeRepository, never()).save(any(Employee.class));
        verify(employeeEventProducer, never()).sendEmployeeCreatedEvent(any(Employee.class));
    }

    @Test
    void createEmployee_WithDuplicateEmail_ShouldThrowDuplicateResourceException() {
        // Arrange
        when(employeeRepository.existsByEmployeeCode("EMP001")).thenReturn(false);
        when(employeeRepository.existsByEmail("john.doe@company.com")).thenReturn(true);

        // Act & Assert
        assertThrows(DuplicateResourceException.class, 
            () -> employeeService.createEmployee(employeeRequest));
        
        verify(employeeRepository, never()).save(any(Employee.class));
        verify(employeeEventProducer, never()).sendEmployeeCreatedEvent(any(Employee.class));
    }

    @Test
    void createEmployee_WithInvalidDepartment_ShouldThrowResourceNotFoundException() {
        // Arrange
        when(employeeRepository.existsByEmployeeCode("EMP001")).thenReturn(false);
        when(employeeRepository.existsByEmail("john.doe@company.com")).thenReturn(false);
        when(departmentRepository.findById(1L)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(ResourceNotFoundException.class, 
            () -> employeeService.createEmployee(employeeRequest));
        
        verify(employeeRepository, never()).save(any(Employee.class));
        verify(employeeEventProducer, never()).sendEmployeeCreatedEvent(any(Employee.class));
    }

    @Test
    void updateEmployee_WithValidData_ShouldUpdateAndReturnEmployeeResponse() {
        // Arrange
        Long employeeId = 1L;
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employee));
        when(departmentRepository.findById(1L)).thenReturn(Optional.of(department));
        when(employeeRepository.existsByEmployeeCode("EMP001")).thenReturn(true); // Same employee
        when(employeeRepository.existsByEmail("john.doe@company.com")).thenReturn(true); // Same employee
        when(employeeRepository.save(any(Employee.class))).thenReturn(employee);
        doNothing().when(employeeEventProducer).sendEmployeeUpdatedEvent(any(Employee.class));

        // Act
        EmployeeResponse response = employeeService.updateEmployee(employeeId, employeeRequest);

        // Assert
        assertNotNull(response);
        assertEquals("John", response.getFirstName());
        assertEquals("Doe", response.getLastName());
        verify(employeeRepository).save(any(Employee.class));
        verify(employeeEventProducer).sendEmployeeUpdatedEvent(any(Employee.class));
    }

    @Test
    void updateEmployee_WithNonExistentEmployee_ShouldThrowResourceNotFoundException() {
        // Arrange
        Long employeeId = 999L;
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(ResourceNotFoundException.class, 
            () -> employeeService.updateEmployee(employeeId, employeeRequest));
        
        verify(employeeRepository, never()).save(any(Employee.class));
        verify(employeeEventProducer, never()).sendEmployeeUpdatedEvent(any(Employee.class));
    }

    @Test
    void deleteEmployee_WithValidId_ShouldDeleteEmployee() {
        // Arrange
        Long employeeId = 1L;
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.of(employee));
        doNothing().when(employeeRepository).delete(employee);
        doNothing().when(employeeEventProducer).sendEmployeeDeletedEvent(any(Employee.class));

        // Act
        employeeService.deleteEmployee(employeeId);

        // Assert
        verify(employeeRepository).delete(employee);
        verify(employeeEventProducer).sendEmployeeDeletedEvent(employee);
    }

    @Test
    void deleteEmployee_WithNonExistentEmployee_ShouldThrowResourceNotFoundException() {
        // Arrange
        Long employeeId = 999L;
        when(employeeRepository.findById(employeeId)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(ResourceNotFoundException.class, 
            () -> employeeService.deleteEmployee(employeeId));
        
        verify(employeeRepository, never()).delete(any(Employee.class));
        verify(employeeEventProducer, never()).sendEmployeeDeletedEvent(any(Employee.class));
    }

    @Test
    void getEmployeeById_WithValidId_ShouldReturnEmployeeResponse() {
        // Arrange
        Long employeeId = 1L;
        when(employeeRepository.findByIdWithDepartment(employeeId)).thenReturn(Optional.of(employee));

        // Act
        EmployeeResponse response = employeeService.getEmployeeById(employeeId);

        // Assert
        assertNotNull(response);
        assertEquals("John", response.getFirstName());
        assertEquals("Doe", response.getLastName());
        assertEquals("EMP001", response.getEmployeeCode());
    }

    @Test
    void getEmployeeById_WithNonExistentId_ShouldThrowResourceNotFoundException() {
        // Arrange
        Long employeeId = 999L;
        when(employeeRepository.findByIdWithDepartment(employeeId)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(ResourceNotFoundException.class, 
            () -> employeeService.getEmployeeById(employeeId));
    }

    @Test
    void getEmployeeByEmployeeCode_WithValidCode_ShouldReturnEmployeeResponse() {
        // Arrange
        String employeeCode = "EMP001";
        when(employeeRepository.findByEmployeeCode(employeeCode)).thenReturn(Optional.of(employee));

        // Act
        EmployeeResponse response = employeeService.getEmployeeByEmployeeCode(employeeCode);

        // Assert
        assertNotNull(response);
        assertEquals("John", response.getFirstName());
        assertEquals("Doe", response.getLastName());
        assertEquals("EMP001", response.getEmployeeCode());
    }

    @Test
    void getEmployeeByEmployeeCode_WithNonExistentCode_ShouldThrowResourceNotFoundException() {
        // Arrange
        String employeeCode = "INVALID";
        when(employeeRepository.findByEmployeeCode(employeeCode)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(ResourceNotFoundException.class, 
            () -> employeeService.getEmployeeByEmployeeCode(employeeCode));
    }
}